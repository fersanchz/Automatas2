package Expresion;
public class Arbol {
	public static boolean InsertaABB(String clave,  Nodo nodo)
	{
		if (clave<nodo.clave)
		{
			if (nodo.LI==null)
			{
				Nodo nuevo=new Nodo(clave);
				nodo.LI=nuevo;
				return true;
			}
			else
			{
				InsertaABB(clave,  nodo.LI);
			}
		}
		else
		{
			if (clave>nodo.clave)
			{
				if (nodo.LD==null)
				{
					Nodo nuevo=new Nodo(clave);
					nodo.LD=nuevo;
					return true;		
				}
				else
				{
					InsertaABB(clave, nodo.LD);
				}
			}
		}
		return false;
	}
	public static void inorden(Nodo nodo)
	{ 
		if (nodo!=null)
		{
			inorden(nodo.LI);
			System.out.print(" "+nodo.clave);
			inorden(nodo.LD);
		}
	}
	public static void preorden(Nodo nodo)
	{
		if (nodo!=null)
		{
			System.out.print(" "+nodo.clave);
			preorden(nodo.LI);
			preorden(nodo.LD);
		}
	}
	public static void postorden(Nodo nodo)
	{
		if (nodo!=null)
		{
			postorden(nodo.LI);
			postorden(nodo.LD);
			System.out.print(" "+nodo.clave);
		}
	}
	public static Nodo llenaArbol(int []datos){
		Nodo raiz=null;
		for(int i=0;i<datos.length;i++){
			if(raiz==null)
				raiz=new Nodo(datos[i]);
			else{
				InsertaABB(datos[i],raiz);				
			}
		}
		return raiz;
	}
	public static void main(String[] args) {
		int datos[]={45,23,2,7,38,65,52,48,96};
		Nodo arbol=llenaArbol(datos);
		System.out.print("\nInorden:\t");
		inorden(arbol);
		System.out.print("\nPreorden:\t");
		preorden(arbol);
		System.out.print("\nPostorden:\t");
		postorden(arbol);
	}

}
