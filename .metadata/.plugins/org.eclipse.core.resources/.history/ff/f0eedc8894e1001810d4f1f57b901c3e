package Expresion;
import java.util.StringTokenizer;
import java.util.Vector;
public class Arbol {
	public static String sOperadores="+-*/";
	public static String [][]asOperadores={
			{"/","0"},
			{"*","0"},
			{"+","1"},
			{"-","1"}
	};
	public static boolean esMayor(String sOp,String sOp2){
		boolean mayor=false;
		int valor1=valorOperador(sOp);
		int valor2=valorOperador(sOp2);
		if(valor1>valor2){
			mayor=true;
		}
		return mayor;
	}
	public static int valorOperador(String sOp){
		int valor=-1;

		for(String []sOperador:asOperadores){
			if(sOperador[0].equals(sOp)){
				valor=Integer.parseInt(sOperador[1]);
			}
		}
		return valor;
	}
	public static boolean InsertaABB(String clave,  Nodo nodo)
	{
		if(esOperador(clave) && esOperador(nodo.clave)){
			if (esMayor(clave,nodo.clave))
			{
				if (nodo.LD==null)
				{
					Nodo nuevo=new Nodo(clave);
					nodo.LD=nuevo;
					return true;
				}
				else
				{
					
					Nodo nuevo=new Nodo(clave);
					String claveSiguiente=nodo.LD.clave;
					if(esOperador(claveSiguiente)){
						if(esMayor(clave,claveSiguiente)){
							nuevo.LI=nodo.LD;
							nodo.LD=nuevo;							
						}else{
							nuevo.LI=nodo.LD;
							nodo.LD=nuevo;
						}
					}
					return true;
				}
			}
			else
			{
				Nodo nuevo=new Nodo(clave);
				nuevo.LI=nodo;
				nodo.LD=nuevo;
				return true;
			}
		}else{
			if(esOperador(clave)){
				
			}else{
				
			}
		}
		return false;
	}
	public static boolean esOperador(String cadena){
		boolean si=false;
		for(String []sOperador:asOperadores){
			if(sOperador[0].equals(cadena))
				si=true;
		}
		return false;
	}
	public static void inorden(Nodo nodo)
	{ 
		if (nodo!=null)
		{
			inorden(nodo.LI);
			System.out.print(" "+nodo.clave);
			inorden(nodo.LD);
		}
	}
	public static void preorden(Nodo nodo)
	{
		if (nodo!=null)
		{
			System.out.print(" "+nodo.clave);
			preorden(nodo.LI);
			preorden(nodo.LD);
		}
	}
	public static void postorden(Nodo nodo)
	{
		if (nodo!=null)
		{
			postorden(nodo.LI);
			postorden(nodo.LD);
			System.out.print(" "+nodo.clave);
		}
	}
	public static Nodo llenaArbol(Vector<String> datos){
		Nodo raiz=null;
		for(int i=0;i<datos.size();i++){
			if(raiz==null)
				raiz=new Nodo(datos.elementAt(i));
			else{
				InsertaABB(datos.elementAt(i),raiz);				
			}
		}
		return raiz;
	}
	public static void main(String[] args) {
		String sExpresion="A + B * C";
		StringTokenizer tokens=new StringTokenizer(sExpresion);
		Vector<String> datos = new Vector<String>();
		while(tokens.hasMoreTokens()){
			datos.add(tokens.nextToken());
	    }
		Nodo arbol=llenaArbol(datos);
		System.out.print("\nInorden:\t");
		inorden(arbol);
		System.out.print("\nPreorden:\t");
		preorden(arbol);
		System.out.print("\nPostorden:\t");
		postorden(arbol);
	}

}
